const tg = window.Telegram.WebApp;
tg.expand(); 

let score = 0;
let userId = null;
let userName = '–ì—ñ—Å—Ç—å';
let clicksPerTap = 1;

const appContainer = document.getElementById('appContainer');
const clicker = document.getElementById('clicker');
const scoreEl = document.getElementById('score');
const balanceEl = document.getElementById('balance');
const themeSwitch = document.getElementById('themeSwitch');
const leaderboardList = document.getElementById('leaderboardList');
const profileUserIdEl = document.getElementById('profileUserId');
const profileUserNameEl = document.getElementById('profileUserName');
const clicksPerTapEl = document.getElementById('clicksPerTap');
const shopBalanceEl = document.getElementById('shopBalance');
const shopItemsContainer = document.getElementById('shopItems');
const poopSpawnArea = document.getElementById('poop-spawn-area'); 

let telegram_id = null;
if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
    telegram_id = tg.initDataUnsafe.user.id;
    userName = tg.initDataUnsafe.user.first_name + ' ' + (tg.initDataUnsafe.user.last_name || '');
} else {
    console.warn("Telegram Web App user data not available. Running in development mode.");
    telegram_id = 'dev_user_123';
    userName = 'Dev User';
}

const API_URL = 'https://kakaskibackend.onrender.com';

const shopProducts = [
    { id: 1, name: '–°–∏–ª—å–Ω–∏–π –ö–ª—ñ–∫', description: '+1 –∫–ª—ñ–∫ –∑–∞ —Ç–∞–ø', cost: 100, type: 'clicks_per_tap', value: 1, icon: 'üí™' },
    { id: 2, name: '–ü–æ–¥–≤—ñ–π–Ω–∏–π –£–¥–∞—Ä', description: '+2 –∫–ª—ñ–∫–∏ –∑–∞ —Ç–∞–ø', cost: 500, type: 'clicks_per_tap', value: 2, icon: '‚úåÔ∏è' },
    { id: 3, name: '–ó–æ–ª–æ—Ç–∞ –ö–∞–∫–∞—à–∫–∞', description: '+10 –∫–ª—ñ–∫—ñ–≤ –∑–∞ —Ç–∞–ø', cost: 2000, type: 'clicks_per_tap', value: 10, icon: 'üåü' },
    { id: 4, name: '–ê–≤—Ç–æ-–ö–ª—ñ–∫–µ—Ä 1', description: '+1 –∫–ª—ñ–∫/—Å–µ–∫', cost: 5000, type: 'auto_clicks', value: 1, icon: 'ü§ñ' }, // –ü—Ä–∏–∫–ª–∞–¥ –∞–≤—Ç–æ–∫–ª—ñ–∫–∞
];

// --- –§—É–Ω–∫—Ü—ñ—ó API –≤–∑–∞—î–º–æ–¥—ñ—ó ---

async function sendApiRequest(url, method = 'GET', data = null) {
    try {
        const options = {
            method: method,
            headers: { 'Content-Type': 'application/json' },
        };
        if (data) {
            options.body = JSON.stringify(data);
        }

        const res = await fetch(url, options);
        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.detail || `–ü–æ–º–∏–ª–∫–∞ API: ${res.status}`);
        }
        return await res.json();
    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å ${method} –∑–∞–ø–∏—Ç—É –¥–æ ${url}:`, error);
        throw error;
    }
}

async function createUser(name, telegramId, initialClicks = 0, initialClicksPerTap = 1) {
    try {
        return await sendApiRequest(`${API_URL}/users/`, 'POST', {
            name,
            telegram_id: telegramId,
            clicks: initialClicks,
            clicks_per_tap: initialClicksPerTap 
        });
    } catch (error) {
        if (error.message && error.message.includes('already exists')) {
            console.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ...");
            return await getUserByTelegramId(telegramId);
        }
        throw error;
    }
}

async function getUserByTelegramId(telegramId) {
    return await sendApiRequest(`${API_URL}/users/by_telegram_id/?telegram_id=${telegramId}`);
}

async function updateUserData(userIdToUpdate, dataToUpdate) {
    await sendApiRequest(`${API_URL}/users/${userIdToUpdate}`, 'PATCH', dataToUpdate);
}

async function getLeaderboard() {
    return await sendApiRequest(`${API_URL}/users/leaderboard/`);
}


function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }

    if (screenId === 'leaderboardScreen') {
        renderLeaderboard();
    } else if (screenId === 'profileScreen') {
        updateProfileScreen();
    } else if (screenId === 'shopScreen') {
        renderShopItems(); // –û–Ω–æ–≤–ª—é—î–º–æ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
        shopBalanceEl.textContent = score.toLocaleString(); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
    }
}

function updateUI() {
    scoreEl.textContent = score.toLocaleString();
    balanceEl.textContent = score.toLocaleString();
    clicksPerTapEl.textContent = clicksPerTap;
    shopBalanceEl.textContent = score.toLocaleString(); // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
    checkShopItemAvailability(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤
}

function updateProfileScreen() {
    profileUserIdEl.textContent = userId || '–ù–µ–≤—ñ–¥–æ–º–æ';
    profileUserNameEl.textContent = userName || '–ù–µ–≤—ñ–¥–æ–º–æ';
    balanceEl.textContent = score.toLocaleString();
    clicksPerTapEl.textContent = clicksPerTap;
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å—Ç–∏–Ω–æ–∫ –Ω–∞ —Ñ–æ–Ω—ñ
function createParticles() {
    const numParticles = 15; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—Ç–∏–Ω–æ–∫
    for (let i = 0; i < numParticles; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        const size = Math.random() * 15 + 5; // –†–æ–∑–º—ñ—Ä –≤—ñ–¥ 5 –¥–æ 20px
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.top = `${Math.random() * 100}%`;
        // –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ —Ç–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó
        particle.style.animationDelay = `${Math.random() * 5}s`;
        particle.style.animationDuration = `${Math.random() * 10 + 5}s`;
        document.body.appendChild(particle);
    }
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è —Å–ø–∞–≤–Ω—É –∫–∞–∫–∞—à–æ–∫ –ø—Ä–∏ –∫–ª—ñ–∫—É
function spawnPoopParticles(event) {
    const rect = poopSpawnArea.getBoundingClientRect();
    for (let i = 0; i < clicksPerTap; i++) { // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∞–≤–Ω–µ–Ω–∏—Ö –∫–∞–∫–∞—à–æ–∫ = clicksPerTap
        const spawnedPoop = document.createElement('div');
        spawnedPoop.classList.add('spawned-poop');

        // –ü–æ–∑–∏—Ü—ñ—è –∫–ª—ñ–∫—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–ª—ñ–∫–µ—Ä-–∑–æ–Ω–∏
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        spawnedPoop.style.left = `${x}px`;
        spawnedPoop.style.top = `${y}px`;

        // –í–∏–ø–∞–¥–∫–æ–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏ —Ç–∞ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
        const randomX = (Math.random() - 0.5) * 150; // –í—ñ–¥ -75 –¥–æ 75px
        const randomY = (Math.random() - 0.5) * 150 - 50; // –í—ñ–¥ -125 –¥–æ 25px (—â–æ–± –ª–µ—Ç—ñ–ª–∏ –≤–≥–æ—Ä—É)
        const randomRotate = Math.random() * 720 - 360; // –í—ñ–¥ -360 –¥–æ 360 –≥—Ä–∞–¥—É—Å—ñ–≤

        spawnedPoop.style.setProperty('--x', `${randomX}px`);
        spawnedPoop.style.setProperty('--y', `${randomY}px`);
        spawnedPoop.style.setProperty('--rotate', `${randomRotate}deg`);

        poopSpawnArea.appendChild(spawnedPoop);

        // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        spawnedPoop.addEventListener('animationend', () => {
            spawnedPoop.remove();
        });
    }
}


async function renderLeaderboard() {
    leaderboardList.innerHTML = '<li class="loading-message">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª—ñ–¥–µ—Ä—ñ–≤...</li>';

    try {
        const leaders = await getLeaderboard();
        leaderboardList.innerHTML = '';

        if (leaders.length === 0) {
            leaderboardList.innerHTML = '<li class="empty-message">–©–µ –Ω–µ–º–∞—î –ª—ñ–¥–µ—Ä—ñ–≤ :( –ë—É–¥—å –ø–µ—Ä—à–∏–º!</li>';
            return;
        }

        leaders.forEach((user, index) => {
            const listItem = document.createElement('li');
            // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å, —â–æ–± –≤–∏–¥—ñ–ª–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if (user.id === userId) {
                listItem.classList.add('current-user');
            }
            listItem.innerHTML = `
                <span>${index + 1}. ${user.name}</span>
                <span>${user.clicks.toLocaleString()} –∫–ª—ñ–∫—ñ–≤</span>
            `;
            leaderboardList.appendChild(listItem);
        });
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤:", error);
        leaderboardList.innerHTML = '<li class="error-message">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª—ñ–¥–µ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.</li>';
        tg.showAlert('–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤.');
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –º–∞–≥–∞–∑–∏–Ω—É
function renderShopItems() {
    shopItemsContainer.innerHTML = ''; // –û—á–∏—â–∞—î–º–æ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

    shopProducts.forEach(product => {
        const itemDiv = document.createElement('div');
        itemDiv.classList.add('shop-item');
        itemDiv.dataset.itemId = product.id; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ç–æ–≤–∞—Ä—É

        const isAffordable = score >= product.cost;

        itemDiv.innerHTML = `
            <div class="item-icon">${product.icon}</div>
            <div class="item-details">
                <span class="item-name">${product.name}</span>
                <span class="item-description">${product.description}</span>
            </div>
            <button class="buy-btn" ${isAffordable ? '' : 'disabled'}>${product.cost.toLocaleString()} üí©</button>
        `;
        shopItemsContainer.appendChild(itemDiv);
    });
    checkShopItemAvailability(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞–≥–∞–∑–∏–Ω—ñ
function checkShopItemAvailability() {
    document.querySelectorAll('.shop-item').forEach(itemDiv => {
        const cost = parseInt(itemDiv.dataset.cost);
        const buyBtn = itemDiv.querySelector('.buy-btn');
        if (score >= cost) {
            buyBtn.removeAttribute('disabled');
        } else {
            buyBtn.setAttribute('disabled', 'true');
        }
    });
}

// –õ–æ–≥—ñ–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä—É
async function buyItem(itemId) {
    const product = shopProducts.find(p => p.id === itemId);
    if (!product) {
        tg.showAlert('–ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }

    if (score < product.cost) {
        tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞–∫–∞—à–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É!');
        return;
    }

    // –ó–Ω—ñ–º–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å
    score -= product.cost;

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –µ—Ñ–µ–∫—Ç —Ç–æ–≤–∞—Ä—É
    if (product.type === 'clicks_per_tap') {
        clicksPerTap += product.value;
    }
    // else if (product.type === 'auto_clicks') { ... –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–∫–ª—ñ–∫–∞ ... }

    updateUI(); // –û–Ω–æ–≤–ª—é—î–º–æ UI –Ω–µ–≥–∞–π–Ω–æ

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –±–µ–∫–µ–Ω–¥ (–±–∞–ª–∞–Ω—Å —Ç–∞ clicks_per_tap)
    try {
        await updateUserData(userId, {
            clicks: score,
            clicks_per_tap: clicksPerTap // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ clicks_per_tap –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
        });
        tg.showNotification({
            message: `–í–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–ª–∏ "${product.name}"!`,
            type: 'success'
        });
        renderShopItems(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ –º–∞–≥–∞–∑–∏–Ω, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ —Ç–æ–≤–∞—Ä—É —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:", error);
        tg.showAlert(`–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–∫—É–ø–∫—É. ${error.message}`);
        // –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–¥–∫–æ—Ç–∏—Ç–∏ –∑–º—ñ–Ω–∏ –≤ score/clicksPerTap —Ç—É—Ç, —è–∫—â–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
    }
}


// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π ---

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø–æ –∫–∞–∫–∞—à—Ü—ñ
clicker.addEventListener('click', (event) => {
    score += clicksPerTap; // –î–æ–¥–∞—î–º–æ –∫–ª—ñ–∫–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∞–ø–≥—Ä–µ–π–¥—É
    updateUI();
    spawnPoopParticles(event); // –°–ø–∞–≤–Ω–∏–º–æ –∫–∞–∫–∞—à–∫–∏

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –±–µ–∫–µ–Ω–¥ –∫–æ–∂–Ω—ñ 10 –∫–ª—ñ–∫—ñ–≤ –∞–±–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    // –¶–µ –∑–º–µ–Ω—à–∏—Ç—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ API –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –∫–æ–∂–Ω–∏–º –∫–ª—ñ–∫–æ–º.
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –ø–æ–∫–∏ —â–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–∂–µ–Ω –∫–ª—ñ–∫, –∞–ª–µ —É –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ –∫—Ä–∞—â–µ —Ü–µ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏.
    if (userId) {
        updateUserData(userId, { clicks: score }).catch(err => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:", err);
        });
    }
});

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ —Ç–µ–º–∏
themeSwitch.addEventListener('change', () => {
    const isDark = themeSwitch.checked;
    document.body.classList.toggle('dark-theme', isDark);
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
});

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Ç–∞ "–ù–∞–∑–∞–¥" —Ç–∞ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
appContainer.addEventListener('click', (event) => {
    // –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if (event.target.matches('.menu-buttons .btn')) {
        const targetScreenId = event.target.dataset.target;
        if (targetScreenId) {
            showScreen(targetScreenId);
        }
    }
    // –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if (event.target.matches('.back-btn')) {
        showScreen('mainMenu');
    }
    // –ö–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏" –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
    if (event.target.matches('.shop-item .buy-btn')) {
        const itemId = parseInt(event.target.closest('.shop-item').dataset.itemId);
        buyItem(itemId);
    }
});


// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ ---
async function init() {
    loadTheme(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    createParticles(); // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ–Ω–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∫–∏

    if (!telegram_id) {
        tg.showAlert('–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram. –ì—Ä–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.');
        console.error("Telegram ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–µ–º–æ–∂–ª–∏–≤–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
        return;
    }

    try {
        const user = await getUserByTelegramId(telegram_id);
        userId = user.id;
        score = user.clicks;
        userName = user.name;
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ clicks_per_tap –∑ –±–µ–∫–µ–Ω–¥—É, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º —î
        if (user.clicks_per_tap !== undefined) {
            clicksPerTap = user.clicks_per_tap;
        }
        tg.showAlert(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${userName}! –í–∞—à –±–∞–ª–∞–Ω—Å: ${score.toLocaleString()}`);
    } catch (error) {
        console.warn("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —Å–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ:", error.message);
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
            const newUser = await createUser(userName, telegram_id, 0, 1);
            userId = newUser.id;
            score = newUser.clicks;
            userName = newUser.name;
            clicksPerTap = newUser.clicks_per_tap;
            tg.showAlert(`–í—ñ—Ç–∞—î–º–æ, ${userName}! –í–∏ –Ω–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å. –ü–æ—á–∏–Ω–∞–π—Ç–µ –∫–ª—ñ–∫–∞—Ç–∏!`);
        } catch (createError) {
            console.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", createError);
            tg.showAlert(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. ${createError.message}. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ Web App.`);
            return;
        }
    }

    updateUI();
    showScreen('mainMenu'); // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
}

init(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –≥—Ä–∏
