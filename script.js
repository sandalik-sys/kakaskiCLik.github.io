// --- Constants (–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏) ---
// –¶–ï–ô URL –ü–û–í–ò–ù–ï–ù –ë–£–¢–ò –¢–û–ß–ù–ò–ú URL –¢–í–û–ì–û –ó–ê–ü–£–©–ï–ù–û–ì–û –ë–ï–ö–ï–ù–î–£ –ù–ê REPLIT
// –¢–≤—ñ–π URL –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±—É–≤:
const API_URL = "https://bc4f424f-769c-4cbf-8349-06cdfb818e25-00-pb50i88fjg02.worf.replit.dev";

// –ë–∞–∑–æ–≤—ñ –∞–ø–≥—Ä–µ–π–¥–∏ - –¢–ò –ú–û–ñ–ï–® –î–û–î–ê–¢–ò/–ó–ú–Ü–ù–ò–¢–ò –á–•
const UPGRADES = [
    { id: 'upgrade1', name: '–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –¢–∞–ø', description: '–ó–±—ñ–ª—å—à—É—î –∫–ª—ñ–∫–∏ –∑–∞ —Ç–∞–ø –Ω–∞ 1', base_cost: 100, cost_multiplier: 1.5, clicks_per_tap_increase: 1, icon: 'üëÜ' },
    { id: 'upgrade2', name: '–°–∏–ª—å–Ω—ñ—à–∏–π –ü–∞–ª–µ—Ü—å', description: '–ó–±—ñ–ª—å—à—É—î –∫–ª—ñ–∫–∏ –∑–∞ —Ç–∞–ø –Ω–∞ 2', base_cost: 500, cost_multiplier: 1.8, clicks_per_tap_increase: 2, icon: 'üí™' },
    { id: 'upgrade3', name: '–ü–æ–¥–≤—ñ–π–Ω–∞ –ö–∞–∫–∞—à–∫–∞', description: '–ó–±—ñ–ª—å—à—É—î –∫–ª—ñ–∫–∏ –∑–∞ —Ç–∞–ø –Ω–∞ 5', base_cost: 2000, cost_multiplier: 2.0, clicks_per_tap_increase: 5, icon: 'üí©üí©' },
    { id: 'upgrade4', name: '–ê–≤—Ç–æ-–¢–∞–ø–µ—Ä (x1/—Å–µ–∫)', description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î 1 –∫–ª—ñ–∫ –Ω–∞ —Å–µ–∫—É–Ω–¥—É', base_cost: 1000, cost_multiplier: 2.0, clicks_per_tap_increase: 0, auto_clicks_increase: 1, icon: 'ü§ñ' },
    // –î–æ–¥–∞–π –±—ñ–ª—å—à–µ –∞–ø–≥—Ä–µ–π–¥—ñ–≤ —Ç—É—Ç
];

// --- DOM Elements (–ï–ª–µ–º–µ–Ω—Ç–∏ HTML, –∑ —è–∫–∏–º–∏ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ) ---
const appContainer = document.getElementById('appContainer');
const screens = {
    main: document.getElementById('main-screen'),
    game: document.getElementById('game-screen'),
    profile: document.getElementById('profile-screen'),
    shop: document.getElementById('shop-screen'),
    leaderboard: document.getElementById('leaderboard-screen')
};

const playButton = document.getElementById('play-btn');
const profileButton = document.getElementById('profile-btn');
const shopButton = document.getElementById('shop-btn');
const leaderboardButton = document.getElementById('leaderboard-btn');
const backButtons = document.querySelectorAll('.back-btn'); // –í—Å—ñ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

const poopButton = document.getElementById('poop-button');
const scoreDisplay = document.getElementById('score-display');
const clicksPerTapDisplay = document.getElementById('clicks-per-tap-display');
const autoClicksPerSecondDisplay = document.getElementById('auto-clicks-per-second-display');
const poopSpawnArea = document.getElementById('poop-spawn-area');

// Profile Screen Elements (–ï–ª–µ–º–µ–Ω—Ç–∏ –µ–∫—Ä–∞–Ω—É –ø—Ä–æ—Ñ—ñ–ª—é)
const profileName = document.getElementById('profile-name');
const profileId = document.getElementById('profile-id');
const profileClicks = document.getElementById('profile-clicks');
const profileClicksPerTap = document.getElementById('profile-clicks-per-tap');
const profileAutoClicks = document.getElementById('profile-auto-clicks');

// Shop Screen Elements (–ï–ª–µ–º–µ–Ω—Ç–∏ –µ–∫—Ä–∞–Ω—É –º–∞–≥–∞–∑–∏–Ω—É)
const shopBalance = document.getElementById('shop-balance');
const shopGrid = document.getElementById('shop-grid');

// Leaderboard Screen Elements (–ï–ª–µ–º–µ–Ω—Ç–∏ –µ–∫—Ä–∞–Ω—É —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤)
const leaderboardList = document.getElementById('leaderboard-list');

// Theme Toggle (–ü–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏)
const themeToggle = document.getElementById('theme-toggle');

// --- Global Variables (–ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ) ---
let currentUser = null; // –û–±'—î–∫—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–µ–∫–µ–Ω–¥—É
let userUpgrades = {}; // –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –∞–ø–≥—Ä–µ–π–¥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {upgrade_id: level}
let isProcessingRequest = false; // –§–ª–∞–≥ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –±–µ–∫–µ–Ω–¥—É
let autoClickInterval = null; // –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –∞–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä–∞

// --- Helper Functions (–î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó) ---

/**
 * –û–±—á–∏—Å–ª—é—î –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥—É –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è.
 * @param {string} upgradeId ID –∞–ø–≥—Ä–µ–π–¥—É.
 * @param {number} level –†—ñ–≤–µ–Ω—å, —è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –¥–æ—Å—è–≥—Ç–∏ (–ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å + 1).
 * @returns {number} –û–±—á–∏—Å–ª–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å.
 */
function calculateUpgradeCost(upgradeId, level) {
    const upgrade = UPGRADES.find(u => u.id === upgradeId);
    if (!upgrade) return Infinity; // –Ø–∫—â–æ –∞–ø–≥—Ä–µ–π–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞

    return Math.floor(upgrade.base_cost * (upgrade.cost_multiplier ** level));
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î —á–∏—Å–ª–æ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞–º–∏ —Ç–∏—Å—è—á.
 * @param {number} num –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
 * @returns {string} –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ.
 */
function formatNumber(num) {
    if (num === null || num === undefined) return '0';
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

/**
 * –ü—Ä–∏—Ö–æ–≤—É—î –≤—Å—ñ –µ–∫—Ä–∞–Ω–∏ —ñ –ø–æ–∫–∞–∑—É—î –≤–∫–∞–∑–∞–Ω–∏–π.
 * @param {HTMLElement} screenToShow –ï–ª–µ–º–µ–Ω—Ç –µ–∫—Ä–∞–Ω—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏.
 */
function showScreen(screenToShow) {
    console.log(`Showing screen: ${screenToShow.id}`);
    Object.values(screens).forEach(screen => {
        screen.classList.remove('active');
    });
    screenToShow.classList.add('active');
}

/**
 * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–ª—ñ–∫—ñ–≤ —Ç–∞ –∫–ª—ñ–∫—ñ–≤ –∑–∞ —Ç–∞–ø.
 */
function updateScoreDisplay() {
    if (currentUser) {
        scoreDisplay.textContent = formatNumber(currentUser.clicks);
        clicksPerTapDisplay.textContent = `–∑–∞ —Ç–∞–ø: ${formatNumber(currentUser.clicks_per_tap || 1)}`; // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ 1, —è–∫—â–æ null
        autoClicksPerSecondDisplay.textContent = `–∞–≤—Ç–æ: ${formatNumber(currentUser.auto_clicks_per_second || 0)}/—Å–µ–∫`; // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ 0, —è–∫—â–æ null
        console.log(`Updated score: ${currentUser.clicks}, CPT: ${currentUser.clicks_per_tap}, Auto: ${currentUser.auto_clicks_per_second}`);
    } else {
        scoreDisplay.textContent = '0';
        clicksPerTapDisplay.textContent = '–∑–∞ —Ç–∞–ø: 1';
        autoClicksPerSecondDisplay.textContent = '–∞–≤—Ç–æ: 0/—Å–µ–∫';
    }
}

/**
 * –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.
 */
function updateProfileInfo() {
    if (currentUser) {
        profileName.textContent = currentUser.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
        profileId.textContent = currentUser.telegram_id || '–ù–µ–≤—ñ–¥–æ–º–æ'; // <-- –í–ò–ü–†–ê–í–õ–ï–ù–û –¢–£–¢: —è–∫—â–æ telegram_id –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ "–ù–µ–≤—ñ–¥–æ–º–æ"
        profileClicks.textContent = formatNumber(currentUser.clicks);
        profileClicksPerTap.textContent = formatNumber(currentUser.clicks_per_tap || 1);
        profileAutoClicks.textContent = formatNumber(currentUser.auto_clicks_per_second || 0);
        console.log('Profile info updated.');
    }
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ UPGRADES —Ç–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 */
function renderShop() {
    shopGrid.innerHTML = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    shopBalance.textContent = `–ë–∞–ª–∞–Ω—Å: ${formatNumber(currentUser.clicks)} üí©`;
    console.log('Rendering shop...');

    UPGRADES.forEach(upgrade => {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –Ø–∫—â–æ –Ω–µ–º–∞—î, —Ç–æ 0.
        const currentLevel = userUpgrades[upgrade.id] || 0;
        const nextCost = calculateUpgradeCost(upgrade.id, currentLevel);
        const canAfford = currentUser.clicks >= nextCost;

        const itemDiv = document.createElement('div');
        itemDiv.className = 'shop-item';
        itemDiv.setAttribute('data-upgrade-id', upgrade.id);

        itemDiv.innerHTML = `
            <div class="item-icon">${upgrade.icon}</div>
            <div class="item-details">
                <span class="item-name">${upgrade.name} (–†—ñ–≤–µ–Ω—å ${currentLevel})</span>
                <span class="item-description">${upgrade.description}</span>
            </div>
            <button class="buy-btn" ${!canAfford ? 'disabled' : ''}>–ö—É–ø–∏—Ç–∏ –∑–∞ ${formatNumber(nextCost)} üí©</button>
        `;

        const buyButton = itemDiv.querySelector('.buy-btn');
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏"
        buyButton.addEventListener('click', () => buyUpgrade(upgrade.id, nextCost, currentLevel));

        shopGrid.appendChild(itemDiv);
    });
    console.log('Shop rendered.');
}

/**
 * –û–±—Ä–æ–±–ª—è—î –ø–æ–∫—É–ø–∫—É –∞–ø–≥—Ä–µ–π–¥—É.
 * @param {string} upgradeId ID –∞–ø–≥—Ä–µ–π–¥—É.
 * @param {number} cost –í–∞—Ä—Ç—ñ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥—É.
 * @param {number} currentLevel –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥—É.
 */
async function buyUpgrade(upgradeId, cost, currentLevel) {
    if (isProcessingRequest) {
        console.warn('Request already in progress. Skipping.');
        return;
    }

    if (currentUser.clicks < cost) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞–∫–∞—à–æ–∫!');
        return;
    }

    const upgrade = UPGRADES.find(u => u.id === upgradeId);
    if (!upgrade) {
        console.error('Upgrade not found:', upgradeId);
        return;
    }

    isProcessingRequest = true;
    console.log(`Attempting to buy ${upgrade.name}...`);

    // --- –õ–æ–∫–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–≥—É–∫—É (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥) ---
    const oldClicks = currentUser.clicks;
    const oldClicksPerTap = currentUser.clicks_per_tap;
    const oldAutoClicks = currentUser.auto_clicks_per_second;
    const oldUpgradeLevel = userUpgrades[upgrade.id] || 0;

    currentUser.clicks -= cost;
    if (upgrade.clicks_per_tap_increase) {
        currentUser.clicks_per_tap += upgrade.clicks_per_tap_increase;
    }
    if (upgrade.auto_clicks_increase) {
        currentUser.auto_clicks_per_second += upgrade.auto_clicks_increase;
    }
    userUpgrades[upgrade.id] = currentLevel + 1; // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥—É

    updateScoreDisplay(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤
    renderShop(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ –º–∞–≥–∞–∑–∏–Ω, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ç–∞ —Ä—ñ–≤–Ω—ñ
    updateProfileInfo(); // –û–Ω–æ–≤–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    startAutoClicker(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º–æ –∞–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏

    try {
        // --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ –±–µ–∫–µ–Ω–¥ ---
        const response = await fetch(`${API_URL}/users/${currentUser.id}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                clicks: currentUser.clicks,
                clicks_per_tap: currentUser.clicks_per_tap,
                auto_clicks_per_second: currentUser.auto_clicks_per_second
                // –¢—É—Ç –º–∏ –± —Ç–∞–∫–æ–∂ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ userUpgrades, —è–∫—â–æ –±–µ–∫–µ–Ω–¥ —ó—Ö –∑–±–µ—Ä—ñ–≥–∞–≤
                // –ù–∞—Ä–∞–∑—ñ –º–∏ –æ–Ω–æ–≤–ª—é—î–º–æ clicks_per_tap —Ç–∞ auto_clicks_per_second –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∫—É–ø–∫–∏
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`Failed to update user on backend after purchase (${response.status}):`, errorText);
            // --- –í—ñ–¥–∫–∞—Ç –∑–º—ñ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, —è–∫—â–æ –±–µ–∫–µ–Ω–¥ –Ω–µ –æ–Ω–æ–≤–∏–≤—Å—è ---
            currentUser.clicks = oldClicks;
            currentUser.clicks_per_tap = oldClicksPerTap;
            currentUser.auto_clicks_per_second = oldAutoClicks;
            userUpgrades[upgrade.id] = oldUpgradeLevel;
            updateScoreDisplay();
            renderShop();
            updateProfileInfo();
            startAutoClicker();
            alert('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        } else {
            console.log(`Upgrade ${upgrade.name} purchased and saved.`);
            // –Ø–∫—â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –º–∏ –º–æ–∂–µ–º–æ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
            // const updatedUser = await response.json();
            // currentUser = updatedUser;
            // updateScoreDisplay(); updateProfileInfo(); renderShop(); startAutoClicker();
        }
    } catch (error) {
        console.error('Network error during purchase:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ URL –±–µ–∫–µ–Ω–¥—É.');
        // --- –í—ñ–¥–∫–∞—Ç –∑–º—ñ–Ω –ø—Ä–∏ –º–µ—Ä–µ–∂–µ–≤—ñ–π –ø–æ–º–∏–ª—Ü—ñ ---
        currentUser.clicks = oldClicks;
        currentUser.clicks_per_tap = oldClicksPerTap;
        currentUser.auto_clicks_per_second = oldAutoClicks;
        userUpgrades[upgrade.id] = oldUpgradeLevel;
        updateScoreDisplay();
        renderShop();
        updateProfileInfo();
        startAutoClicker();
    } finally {
        isProcessingRequest = false;
    }
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤.
 */
async function fetchLeaderboard() {
    console.log('Fetching leaderboard...');
    try {
        const response = await fetch(`${API_URL}/users/leaderboard/`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status} - ${await response.text()}`);
        }
        const leaders = await response.json();
        leaderboardList.innerHTML = ''; // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ø–∏—Å–æ–∫

        if (leaders.length === 0) {
            leaderboardList.innerHTML = '<li>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤.</li>';
            console.log('Leaderboard is empty.');
            return;
        }

        leaders.forEach((user, index) => {
            const listItem = document.createElement('li');
            listItem.innerHTML = `
                <span>${index + 1}. ${user.name}</span>
                <span>${formatNumber(user.clicks)} üí©</span>
            `;
            leaderboardList.appendChild(listItem);
        });
        console.log(`Leaderboard loaded with ${leaders.length} entries.`);
    } catch (error) {
        console.error('Error fetching leaderboard:', error);
        leaderboardList.innerHTML = '<li>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–µ–∫–µ–Ω–¥.</li>';
    }
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ.
 */
async function saveUserData() {
    if (!currentUser || isProcessingRequest) {
        console.log('Skipping save: no current user or request in progress.');
        return;
    }
    isProcessingRequest = true;
    console.log('Saving user data...');

    try {
        const response = await fetch(`${API_URL}/users/${currentUser.id}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                clicks: currentUser.clicks,
                clicks_per_tap: currentUser.clicks_per_tap,
                auto_clicks_per_second: currentUser.auto_clicks_per_second
            })
        });

        if (!response.ok) {
            console.error('Failed to save user data:', await response.text());
        } else {
            console.log('User data saved successfully.');
        }
    } catch (error) {
        console.error('Network error during save:', error);
    } finally {
        isProcessingRequest = false;
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞—î –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä.
 */
function startAutoClicker() {
    if (autoClickInterval) {
        clearInterval(autoClickInterval); // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        console.log('Cleared previous auto-clicker interval.');
    }

    if (currentUser && currentUser.auto_clicks_per_second > 0) {
        console.log(`Starting auto-clicker with ${currentUser.auto_clicks_per_second} clicks/sec.`);
        autoClickInterval = setInterval(() => {
            currentUser.clicks += currentUser.auto_clicks_per_second;
            updateScoreDisplay();
            // –ú–æ–∂–µ–º–æ —Ç–∞–∫–æ–∂ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ saveUserData —Ç—É—Ç,
            // –∞–ª–µ –∫—Ä–∞—â–µ –ø–æ–∫–ª–∞–¥–∞—Ç–∏—Å—è –Ω–∞ debounce –∞–±–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ/–ø–µ—Ä–µ—Ö–æ–¥—ñ.
        }, 1000); // –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    } else {
        console.log('Auto-clicker not started/needed (auto_clicks_per_second is 0).');
    }
}


/**
 * –û–±—Ä–æ–±–ª—è—î –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 */
async function loadUser() {
    console.log('Attempting to load user...');
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ Telegram Web App –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp || !window.Telegram.WebApp.initDataUnsafe || !window.Telegram.WebApp.initDataUnsafe.user) {
        console.warn("Telegram Web App data not found. Running in TEST MODE.");
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ, —è–∫—â–æ Telegram User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        currentUser = {
            id: 99999, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π ID –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            name: "Test User",
            telegram_id: "99999",
            clicks: 0,
            clicks_per_tap: 1,
            auto_clicks_per_second: 0
        };
        alert("–ó–∞–ø—É—â–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.");
        updateScoreDisplay();
        updateProfileInfo();
        renderShop();
        startAutoClicker();
        showScreen(screens.main); // –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        return;
    }

    const telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
    console.log("Telegram user data:", telegramUser);

    try {
        // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        let response = await fetch(`${API_URL}/users/by_telegram_id/?telegram_id=${telegramUser.id}`);
        console.log(`Fetched user by Telegram ID, status: ${response.status}`);

        if (response.status === 404) {
            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ
            console.log('User not found on backend. Creating new user...');
            const createData = {
                name: telegramUser.first_name || "New Player",
                telegram_id: String(telegramUser.id), // Telegram ID –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º!
                clicks: 0,
                clicks_per_tap: 1, // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                auto_clicks_per_second: 0 // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            };
            response = await fetch(`${API_URL}/users/`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(createData)
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Failed to create user: ${response.status} - ${errorText}`);
            }
            currentUser = await response.json();
            console.log("New user created successfully:", currentUser);
        } else if (response.ok) {
            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π
            currentUser = await response.json();
            console.log("User loaded successfully:", currentUser);
        } else {
            const errorText = await response.text();
            throw new Error(`Failed to load user: ${response.status} - ${errorText}`);
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ userUpgrades.
        // –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, –æ—Å–∫—ñ–ª—å–∫–∏ –±–µ–∫–µ–Ω–¥ –∑–∞—Ä–∞–∑ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î —Ä—ñ–≤–Ω—ñ –∞–ø–≥—Ä–µ–π–¥—ñ–≤.
        // –ú–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ clicks_per_tap —Ç–∞ auto_clicks_per_second —î —Å—É–º–æ—é –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è + –∞–ø–≥—Ä–µ–π–¥–∏.
        // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤, –±–µ–∫–µ–Ω–¥ –º–∞–≤ –±–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ–±'—î–∫—Ç upgrades {id: level}.
        userUpgrades = {};
        UPGRADES.forEach(upgrade => {
            let level = 0;
            // –¶–µ –¥—É–∂–µ —Å–ø—Ä–æ—â–µ–Ω–æ —ñ –ø—Ä–∞—Ü—é—î, —è–∫—â–æ –∞–ø–≥—Ä–µ–π–¥–∏ –¥–∞—é—Ç—å +1, +2, +5 —Ç–æ—â–æ.
            // –î–ª—è –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∏—Ö –∞–ø–≥—Ä–µ–π–¥—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–µ —á—ñ—Ç–∫–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ.
            if (upgrade.clicks_per_tap_increase > 0) {
                // –Ø–∫—â–æ clicks_per_tap_increase = 1, —ñ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ clicks_per_tap = 5,
                // —Ç–æ —Ä—ñ–≤–µ–Ω—å = 4 (–±–∞–∑–æ–≤–∏–π 1 + 4 –∞–ø–≥—Ä–µ–π–¥–∏)
                if (upgrade.clicks_per_tap_increase === 1) { // –Ø–∫—â–æ –∞–ø–≥—Ä–µ–π–¥ –¥–∞—î +1
                    level = (currentUser.clicks_per_tap || 1) - 1;
                } else {
                     // –Ø–∫—â–æ –∞–ø–≥—Ä–µ–π–¥ –¥–∞—î –Ω–µ +1, —Ç–æ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –ª–µ–≥–∫–æ –≤–∏—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –±–µ–∑ –±–µ–∫–µ–Ω–¥—É.
                     // –¶–µ –º—ñ—Å—Ü–µ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.
                }
            } else if (upgrade.auto_clicks_increase > 0) {
                 if (upgrade.auto_clicks_increase === 1) { // –Ø–∫—â–æ –∞–≤—Ç–æ-–∞–ø–≥—Ä–µ–π–¥ –¥–∞—î +1
                    level = (currentUser.auto_clicks_per_second || 0);
                 } else {
                     // –¢–µ —Å–∞–º–µ
                 }
            }
            if (level < 0) level = 0; // –ù–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
            userUpgrades[upgrade.id] = level;
        });
        console.log("User upgrades initialized:", userUpgrades);


        // --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
        updateScoreDisplay();
        updateProfileInfo();
        renderShop();
        startAutoClicker(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

        // –í–∞–∂–ª–∏–≤–æ –¥–ª—è Telegram Web App
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand(); // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ Web App –Ω–∞ –≤—Å—é –≤–∏—Å–æ—Ç—É
        showScreen(screens.main); // –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        console.log('Telegram Web App ready and expanded. Main screen shown.');

    } catch (error) {
        console.error('FATAL Initialization error:', error);
        alert(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.`);
        // –ó–∞–ª–∏—à–∞—î–º–æ –µ–∫—Ä–∞–Ω –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        appContainer.innerHTML = `<div style="padding: 20px; color: red; text-align: center;">–ü–æ–º–∏–ª–∫–∞: ${error.message}. <br>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.</div>`;
    }
}


// --- Event Listeners (–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π) ---

// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
playButton.addEventListener('click', () => showScreen(screens.game));
profileButton.addEventListener('click', () => {
    showScreen(screens.profile);
    updateProfileInfo(); // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
});
shopButton.addEventListener('click', () => {
    showScreen(screens.shop);
    renderShop(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
});
leaderboardButton.addEventListener('click', () => {
    showScreen(screens.leaderboard);
    fetchLeaderboard(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ
});

backButtons.forEach(button => {
    button.addEventListener('click', () => showScreen(screens.main));
});

// –õ–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫–∞ –ø–æ –∫–Ω–æ–ø—Ü—ñ "–ö–∞–∫–∞—à–∫–∏"
poopButton.addEventListener('click', () => {
    if (!currentUser) {
        console.warn('No current user to click for.');
        return;
    }

    currentUser.clicks += (currentUser.clicks_per_tap || 1); // –î–æ–¥–∞—î–º–æ –∫–ª—ñ–∫–∏ –∑–∞ —Ç–∞–ø
    updateScoreDisplay(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞–ª–µ–Ω—å–∫–æ—ó –∫–∞–∫–∞—à–∫–∏ (–≤—ñ–∑—É–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç)
    const spawnedPoop = document.createElement('div');
    spawnedPoop.className = 'spawned-poop';
    const rect = poopButton.getBoundingClientRect(); // –†–æ–∑–º—ñ—Ä–∏ –∫–Ω–æ–ø–∫–∏ "–∫–∞–∫–∞—à–∫–∏"
    // –†–∞–Ω–¥–æ–º–Ω–µ –∑–º—ñ—â–µ–Ω–Ω—è –¥–ª—è –µ—Ñ–µ–∫—Ç—É —Ä–æ–∑–ª—å–æ—Ç—É
    const x = Math.random() * rect.width - rect.width / 2;
    const y = Math.random() * rect.height - rect.height / 2;
    const rotate = Math.random() * 360;

    spawnedPoop.style.setProperty('--x', `${x}px`);
    spawnedPoop.style.setProperty('--y', `${y - 50}px`); // –ó–º—ñ—Å—Ç–∏—Ç–∏ –≤–≥–æ—Ä—É
    spawnedPoop.style.setProperty('--rotate', `${rotate}deg`);
    spawnedPoop.style.left = `${rect.left + rect.width / 2}px`;
    spawnedPoop.style.top = `${rect.top + rect.height / 2}px`;

    poopSpawnArea.appendChild(spawnedPoop);

    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ø–∞–≤–Ω–µ–Ω—É –∫–∞–∫–∞—à–∫—É –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    spawnedPoop.addEventListener('animationend', () => {
        spawnedPoop.remove();
    });
});

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
// –¶–µ –∫—Ä–∞—â–µ, –Ω—ñ–∂ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∫–ª—ñ–∫—É.
let saveTimeout;
appContainer.addEventListener('click', () => {
    clearTimeout(saveTimeout); // –°–∫–∏–¥–∞—î–º–æ —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –±—É–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–ª—ñ–∫
    saveTimeout = setTimeout(saveUserData, 3000); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏ –±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ
});

// –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ —Ç–µ–º–∏
themeToggle.addEventListener('change', () => {
    document.body.classList.toggle('dark-theme', themeToggle.checked);
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–µ–º–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ –±—Ä–∞—É–∑–µ—Ä–∞
    localStorage.setItem('theme', themeToggle.checked ? 'dark' : 'light');
});

// --- Initialization (–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è - –∑–∞–ø—É—Å–∫ –∫–æ–¥—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏) ---
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Content Loaded. Starting initialization...');
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Ç–µ–º—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
        themeToggle.checked = true;
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    loadUser();
});
